#Brute Force Approach
#Space Complexity = O(1) & Time Complexity O((N*M)*(N + M)) + O(N*M)
class Solution {
    public void setZeroes(int[][] arr) {
      int m=arr.length; 
      int n=arr[0].length; 
      
      for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
              if(arr[i][j]==0){
                  setRowZero(arr,m,n,i);
                  setColumnZero(arr,m,n,j);
              }
          }
      }
        for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
              if(arr[i][j]==-111){
                  arr[i][j]=0;
              }
          }
      } 
    }
    public void setRowZero(int [][] arr,int m,int n,int row){
        for(int j=0;j<n;j++){
            if(arr[row][j]!=0)
                arr[row][j]=-111;
        }
    }
    public void setColumnZero(int [][] arr,int m,int n,int column){
        for(int j=0;j<m;j++){
            if(arr[j][column]!=0)
                arr[j][column]=-111;
        }
    }
}

#Better Approach 
#Space Complexity = O(M+N) Time Complexity=O(2(M*N))->O(M*N)
class Solution {
    public void setZeroes(int[][] arr) {
      int m=arr.length; 
      int n=arr[0].length; 
      int[] row=new int[m];
      int[] column=new int[n];

      for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
              if(arr[i][j]==0){
                  row[i]=1;
                  column[j]=1;
              }
          }
      }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
            if(row[i]==1 ||column[j]==1){
               arr[i][j]=0;
            }
        }
        }
    }
}

#Optimal Approach
#Space Complexity O(1) , Time Complexity O(2*(M*N)) -> O(M*N)
class Solution {
    public void setZeroes(int[][] arr) {
      int m=arr.length; 
      int n=arr[0].length; 
      int col0=1;

      for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
            if(arr[i][j]==0){
                if(j==0){
                    col0=0;
                }
                else{
                    arr[0][j]=0;
                }
                arr[i][0]=0;  
            }
          }
      }

        for(int i=m-1;i>=1;i--){
            for(int j=n-1;j>=1;j--){
            if(arr[i][0]==0 || arr[0][j]==0)
             arr[i][j]=0;
        }
        }
       if(arr[0][0]==0){
           for(int i=0;i<n;i++){
               arr[0][i]=0;
           }
       }
       if(col0==0){
           for(int j=0;j<m;j++){
               arr[j][0]=0;
           }
       }
    }
}
