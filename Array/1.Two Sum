#Brute Force 
Time Complexity=O(n*n) 
class Solution {
    public int[] twoSum(int[] arr, int target) {
        int n=arr.length;
        int[] ans=new int[2];
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i]+arr[j]==target){
                ans[0]=i;
                ans[1]=j;
                }
            }
        }
        return ans;
    }
}
#Better Approach (Hashing)
Time Complexity=O(n) Space Complexity O(n)
class Solution {
    public int[] twoSum(int[] arr, int target) {
        int n=arr.length;
        HashMap<Integer,Integer> map=new HashMap<>();

        int[] ans=new int[2];
        for(int i=0;i<n;i++){
           int numReq=target-arr[i];
           if(map.containsKey(numReq)){
           ans[0]=map.get(numReq);
           ans[1]=i;
           return ans;
           }
           map.put(arr[i],i);
        }
        return ans;
    }
}
