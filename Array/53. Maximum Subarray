#Brute Force Solution
#Time Complexity O(n*n), Space Complexity=O(1)
##Will throw TLE
class Solution {
   public int maxSubArray(int[] arr) {
   int maxSum=Integer.MIN_VALUE;
   int n=arr.length;
   for(int i=0;i<n;i++){
       int currSum=0;
       for(int j=i;j<n;j++){
          currSum+=arr[j];
          maxSum=Math.max(maxSum,currSum);
        }  
    }
     return maxSum; 
     } 
}

#Optimum Approach
#Space Complexity O(1) , Time Complexity O(n)
class Solution {
    public int maxSubArray(int[] arr) {
     int n=arr.length;
     int sum=0;
     int maxSum = Integer.MIN_VALUE; 
     if(n==1){
         return arr[0];
     }
        for(int i=0;i<n;i++){
            if(sum<0){
                sum=0;
            }
            sum+=arr[i];
            maxSum=Math.max(sum,maxSum);
        }
     return maxSum;  
    }
}
